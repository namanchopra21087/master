*show dbs;command to see all the database.
*show collections; to see all tables in mongodb.
*db.colelctionname.find();to see all the data inside collection.
*db.PolicyDocument.deleteMany({});delete all the documents inside collection.
*use database-name;to switch to the database.
*db.PolicyDocument.count();returns all the records inside the collection.
*Drop database:-
	1)use databaseName;
	2)db.dropDatabase();
*db.PolicyDocument.getIndexes();get all the indexes associated with the "PolicyDocument" collection.
*db.PolicyValidationFailure.deleteMany({});delete all the documents inside collection.
* Selectively delete records from mongoDB.
db.PolicyDocument.find().limit(100).forEach(doc => 
     { 
       db.PolicyDocument.remove({_id:doc._id})
     }
    )
* Update database with filter,convert it into double and save again.
db.getCollection('claims').find({partnerId:"IDSAMSUOEMNA01"}).forEach( function (x) {   
  x.excessFee = parseInt(x.excessFee,10); // convert field to double
  db.getCollection('claims').save(x);
});

* Filter data from mongoDb with dateRange lessThenEqual to and greaterThenEqualTO. Date in mongo saved in string format.
db.getCollection('policyDocuments').find({"$expr": { "$and": [
    {"$lte": [{ $dateFromString: 
        { dateString: "$creationDate",format: "%d/%m/%Y"}}, 
        {$toDate: "12/30/2019"} ]},<!--Remember this $toDate must be consider as mm/dd/yyyy -->
    {"$gte": [{ $dateFromString: 
        { dateString: "$creationDate",format: "%d/%m/%Y"}}, 
        {$toDate: "12/26/2019"} ]} <!--Remember this $toDate must be consider as mm/dd/yyyy -->
    ]}
	})
*Find duplicate records in mongoDb:
db.policyDocuments.aggregate(
    {"$group" : { "_id": "$policyIMEINumber", "count": { "$sum": 1 } } },
    {"$match": {"_id" :{ "$ne" : null } , "count" : {"$gt": 1} } },
    {"$project": {"policyIMEINumber" : "$_id", "_id" : 0} }
 );
 where policyDocuments is teh collectionName and policyIMEINumber is the field name.
* Update fields in mongoDb
 db.getCollection('policyDocuments').find({}).forEach(doc => 
     { 
       db.policyDocuments.update({_id: doc._id},{$set:{"balanceRRP": doc.deviceRRP}});
     }
    )
* Writing javascript inside mongo shell:
Step1: Create .js file in your local with commands like below:
printjson("************Executing script********************");
var mongo = new Mongo("uat.amtrust.asia:27017");
var db =mongo.getDB("admin");
db.auth("root" , "dbP@ssw0rd");
var policyDb = mongo.getDB("policyDB");
var collection = policyDb.getCollection('policyDocuments').find({});
collection.forEach((policydoc) =>{
	printjson("In the air");
	if(policydoc.balanceRRP == null || policydoc.balanceRRP == ''){
		printjson(policydoc.policyNumber);
		printjson(policydoc.deviceRRP);
		policydoc.balanceRRP = policydoc.deviceRRP;
		policyDb.getCollection('policyDocuments').save(policydoc);
	}
});
printjson("************Finshed script********************");

Step2: Use command load("pathoffile.js")

Refer:https://docs.mongodb.com/manual/reference/mongo-shell/

*Dynamic script to add a new field and increment by 1:
var i=1001
db.getCollection('claimLogs').find({}).forEach(doc => 
     { 
       db.claimLogs.update({_id: doc._id},{$set:{"claimLogId": NumberLong(i++)}});
     }
    )
*Mongo dump restore.
mongorestore --archive=20190319.archive.gz --gzip

*MongoDB group by policyNumber to find duplciates:
db.getCollection('policyDocuments').aggregate([
{$group: { _id: "$policyNumber",count:{ $sum: 1}}},
{$match:{count:{ $gt: 1 }}}
])
------------------------------------------------------------------------------------
*Scripts to run directly on server for mongoDB. Its a two step process.
Step1): Save the script on server system.js with unique id as:
db.system.js.save({_id:"vietnamMigrateProcedure",
   value:function(a) {
  var conn = new Mongo();
  var policydb = conn.getDB("policyDB");
var op=""
policydb.policyDocuments.find(
    { 
        "partnerId" : "PHHOMCRCFINA01", 
        "countryCode" : "PH", 
        "productsModel" : /Vietnam/,
    }
).forEach(function(e,i) {
    e.productsModel=e.productsModel.replace("Vietnam","Philippines");
    policydb.policyDocuments.save(e);
})
return op
}})

Step2): Execute the script with command:
db.eval("return vietnamMigrateProcedure(1)");
--------------------------------------------------------------------------------------
Command to start mongo server on EC2 instance:
sudo systemctl start mongod
--------------------------------------------------------------------------------------
db.system.js.save({
    _id: "columnShiftFixing",
    value: function(a) {
        var conn = new Mongo();
        var policyDb = conn.getDB("policyDB");

        policyDb.policyDocuments.find({
            "partnerId": "PHHOMCRCFINA01",
            "columnShiftFixed": {
                $exists: false
            }
        }).forEach(function(doc) {
            doc.clientName = doc.retailerName
            doc.retailerName = doc.keyAccountIndicator
            doc.keyAccountIndicator = doc.legacyCustomerId
            doc.legacyCustomerId = doc.legacyTransferPrice
            doc.legacyTransferPrice = doc.legacyClaimCount
            doc.legacyClaimCount = doc.legacyCertofInsurance
            doc.legacyCertofInsurance = doc.legacyBalanceRRP
            doc.legacyBalanceRRP = doc.legacyMasterPolicyNumber
            doc.legacyMasterPolicyNumber = doc.legacyCurrentTotalClaimAmt
            doc.legacyCurrentTotalClaimAmt = doc.legacyPolicyId
            doc.legacyPolicyId = doc.legacyUnderWritingCost
            doc.legacyUnderWritingCost = doc.legacyCompanyREGNumber
            doc.legacyCompanyREGNumber = doc.legacyProductPartner
            doc.legacyProductPartner = doc.legacyFinancePartner
            doc.legacyFinancePartner = doc.legacyPolicyRRP
            doc.legacyPolicyRRP = doc.legacyReInsurancefee
            doc.legacyReInsurancefee = 0
            doc.legacyRetailPartner = doc.legacyClientMargin
            doc.legacyClientMargin = doc.legacyRetailMargin
            doc.legacyRetailMargin = 0
            doc.columnShiftFixed = true
            policyDb.policyDocuments.save(doc)

        })
        return "Executed Successfully"
    }
})
db.eval("return columnShiftFixing(1)");
--------------------------------------------------------------------------------------
MongoDB mongodump/mongoRestore:
*create mongoDump from a cluster on your local:
mongodump --host mongo.db.staging.crmz.k8s.bolttech-devops.com --port 27017 -u root -p 8ZepKp1Hj9OVweTl --authenticationDatabase admin --archive=20190319.archive.gz --gzip
--host: Is the source ip from where we need to create dump
-u: userName of the source.
-p: passwprd of the source.
*mongorestore to restore the db:
mongorestore --uri mongodb+srv://optimusStaging:optimusStaging@staging.vfau2.mongodb.net --archive=20190319.archive.gz --gzip
--uri: url of teh destination where dump has to be restored.

In case import has to be done for some collections:
mongoimport --uri mongodb+srv://optimusStaging:optimusStaging@staging.vfau2.mongodb.net/productDB --collection clients --type JSON --file clients
--------------------------------------------------------------------------------------
