*show dbs;command to see all the database.
*show collections; to see all tables in mongodb.
*db.colelctionname.find();to see all the data inside collection.
*db.PolicyDocument.deleteMany({});delete all the documents inside collection.
*use database-name;to switch to the database.
*db.PolicyDocument.count();returns all the records inside the collection.
*Drop database:-
	1)use databaseName;
	2)db.dropDatabase();
*db.PolicyDocument.getIndexes();get all the indexes associated with the "PolicyDocument" collection.
*db.PolicyValidationFailure.deleteMany({});delete all the documents inside collection.
* Selectively delete records from mongoDB.
db.PolicyDocument.find().limit(100).forEach(doc => 
     { 
       db.PolicyDocument.remove({_id:doc._id})
     }
    )
* Update database with filter,convert it into double and save again.
db.getCollection('claims').find({partnerId:"IDSAMSUOEMNA01"}).forEach( function (x) {   
  x.excessFee = parseInt(x.excessFee,10); // convert field to double
  db.getCollection('claims').save(x);
});

* Filter data from mongoDb with dateRange lessThenEqual to and greaterThenEqualTO. Date in mongo saved in string format.
db.getCollection('policyDocuments').find({"$expr": { "$and": [
    {"$lte": [{ $dateFromString: 
        { dateString: "$creationDate",format: "%d/%m/%Y"}}, 
        {$toDate: "12/30/2019"} ]},<!--Remember this $toDate must be consider as mm/dd/yyyy -->
    {"$gte": [{ $dateFromString: 
        { dateString: "$creationDate",format: "%d/%m/%Y"}}, 
        {$toDate: "12/26/2019"} ]} <!--Remember this $toDate must be consider as mm/dd/yyyy -->
    ]}
	})
*Find duplicate records in mongoDb:
db.policyDocuments.aggregate(
    {"$group" : { "_id": "$policyIMEINumber", "count": { "$sum": 1 } } },
    {"$match": {"_id" :{ "$ne" : null } , "count" : {"$gt": 1} } },
    {"$project": {"policyIMEINumber" : "$_id", "_id" : 0} }
 );
 where policyDocuments is teh collectionName and policyIMEINumber is the field name.
 * Update fields in mongoDb
 db.getCollection('policyDocuments').find({}).forEach(doc => 
     { 
       db.policyDocuments.update({_id: doc._id},{$set:{"balanceRRP": doc.deviceRRP}});
     }
    )