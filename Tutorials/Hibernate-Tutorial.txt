* hibernate.cfg.xml property show_sql=true gives all the sql used for ddl and dml by hibernate at console.
* hibernate.cfg.xml property hbm2ddl.auto propeerty should be set to "update". When its set to "create" each time hibernate hits connects to database it 
  re-creates the entire db, deleteing any previous existing records.
* @Entity annotation is sufficient to make an java pojo map to database and if no table is created for that entity hibernate creates all
  database schema on its on to persist the pojo values.
* @Temporal is used to define whether for a date field we want to save date or time using "TemporalType.Date or TemporalType.timestamp or TemporalType.Time".
* @Embedded is used ovefr an pojo that is embedded in another entity.
Example:-
@Entity
public class UserDetails{

 @Id
 @generatedValue(strategy=GenerationType.Auto)
 private int Number;
 @Embedded
 private Address add;
 
 
 gettert and setters
 
}

@Embedable
public class Address{
	its member var and gettert and setters
}

* SessionFatory in hibernate is always singelton to avoid performance load on server.
* Code to get SessionFactory=new Configuration().configure().buildSessionFactory().
* Primary keys are of two types:- Serogate key(Key which has no business value) or natural key(which has business value).
* @NotFound(action=NotFoundAction.Ignore), this annotation is used in cases where there is @ManyToOne relationship and its possible that other object is not yet 
  associated.
  Example:-
  @Entity
  public class UserDetails{
	  private int user_id;
	  @OneToMany(mappedBy="user",cascade=CascadeType.All)
	  Collection<Vehicle> vehList=new ArrayList<>();
	  }

  @Entity
	public class vehicle{
	@ManyToOne
	@NotFoundAction(action=NotFoundAction.Ignore)
	@JoinColumn(name="User_Id")
	private UserDetails user;

	}
HibernateTest.java{

		public static void main(String[] args){
			SessionFactory sessionFactory=new Configuration().configure.buildSessionFactory();
			Session session=sessionFactory.openSession();
			UserDetails user=new UserDetails();
			Vehicle vehicle=new Vehicle();
			userdetails.getVehicle().add(vehicle);
			session.save(user);
			session.save(vehicle);//Line 53
		}
}
In above example even if there is a vehicle which has no user associated with it and we try to get userdetails hibernate will not thrown any exception.

* In above example if we use cascadetype.all inside onetomany mapping then no need to save vehicle. on saving user vehicle gets saved implicitly by hibernate.
   Line #53 not required byt if cascade is not mentioned then need to save child object also explicitly.
* In above example if we use mappedBy, it tells hibernate what UserDetails is mappedBy to Vehicle(user membervariable inside vehicle)
  and @JoinColumn tells hibernate to create a new column inside vehicle to map tto userdetails. Without giving mappedBy, hibernate will create a new 
  table for this mapping which is not required.
*For @ManyToMany there shall always be a new Table showing the relationship.
Inheritance in hibernate:-
* Hibernate by default uses "Single Table Strategy" for hibernate.
Example:-
	@Entity
	@Inheritance(startegy=InheritanceType.Single_Table)
	@DiscriminatprColumn(
	name="VEHICLE_TYPE",
	discriminatorType=DiscriminatorType.String
	}
	public class vehicle{
	@Id @GeneratedValue
	String vehicle_name;
	Integer vehicle_id;

	}
	
	@Entity
	@DiscriminatorValue("Bike")
	public class twoWheeler extends vehicle{
	String GearType;

	}
	
	@Entity
	@DiscriminatorValue("Car")
	public class fourWheeler extends vehicle{
	String SteeringType;

	}
*Above inheritance structure shall create one singlw table "Vehicle" with default "Single_Table" strategy in hibernate
*If @DiscriminatorType is not given hibetrnate takes the DType as the default name of the column.
*If @DiscriminatorValue is not given hibetrnate takes the class name as the default value.
	VEHICLE_TYPE	VEHICLE_NAME	VEHICLE_ID	GEAR_TYPE	STEERING_TYPE
		VEHICLE	         ABC	       1		
         BIKE	      ThunderBolt	   2	       X	 
		 CAR			Maruti	      3		                                 Y

	

----Watched videos till 18 from youtube.url:=https://www.youtube.com/watch?v=Zj1mRWfhx_Y&index=19&list=PL4AFF701184976B25--------